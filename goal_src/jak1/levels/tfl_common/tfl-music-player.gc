;;-*-Lisp-*-
(in-package goal)

(define *tfl-music-playing?* #f)
(define *tfl-music-stop* #f)

(deftype tfl-music-player (process)
  ((level level)
   )
  (:methods
    (play! (_type_) none)
    (stop! (_type_) none)
    (set-level! (_type_) none)
    )
  (:states
    tfl-music-player-idle
    tfl-music-player-playing
    tfl-music-player-fade
    )
  )

(define *tfl-music-player* (the (pointer tfl-music-player) #f))

(defun tfl-music-player-volume ()
  (-> *setting-control* current music-volume)
  )

(defmethod set-level! ((this tfl-music-player))
  (set! (-> this level) (the-as level (aif (level-get-target-inside *level*) it #f)))
  (none)
  )

(defun tfl-level-has-music? ((lev level))
  (when (!= (-> lev info custom-music) 0)
    (return #t)
    )
  #f
  )

(defun tfl-level->musicstring ((lev level))
  (return (symbol->string (-> lev info custom-music)))
  (the string #f)
  )

(defmethod play! ((this tfl-music-player))
  ;; (format #t "tfl-music-player::play!~%")
  (when (tfl-level-has-music? (-> this level))
    (if *tfl-music-playing?*
      (stop! this)
      )
    (play-tfl-music (tfl-level->musicstring (-> this level)) (tfl-music-player-volume))
    )
  (none)
  )

(defmethod stop! ((this tfl-music-player))
  ;; (format #t "tfl-music-player::stop!~%")
  (when *tfl-music-playing?*
    (true! *tfl-music-stop*)
    )
  (none)
  )

(defmethod deactivate ((this tfl-music-player))
  (stop! this)
  (false! *tfl-music-playing?*)
  (false! *tfl-music-stop*)
  (set! *tfl-music-player* (the (pointer tfl-music-player) #f))
  (call-parent-method this)
  )

(defbehavior sleep-code process ()
  (logior! (-> self mask) (process-mask sleep-code))
  (loop (suspend))
  (none)
  )

(defbehavior tfl-music-player-init-by-other tfl-music-player ()
  (set! *tfl-music-player* (the (pointer tfl-music-player) (process->ppointer self)))
  (set-level! self)
  (go tfl-music-player-idle)
  (none)
  )

(defbehavior tfl-music-player-post tfl-music-player ()
  ;; (format 0 "POST tfl-music-player~%")
  (let ((level (the-as level (aif (level-get-target-inside *level*) it #f))))
    ;; (format *stdcon* "tfl-music-player:~%cur-lev ~A~%level ~A~%playing? ~A~%state: ~A stop: ~A~%"
    ;;   level (-> self level) *tfl-music-playing?* (-> self state name) *tfl-music-stop*)
    (when (and (!= (-> self level) level))
      (set-level! self)
      (stop! self)
      )
    )
  (none)
  )

(defstatehandler tfl-music-player
  :post tfl-music-player-post
  )

(defstate tfl-music-player-idle (tfl-music-player)
  :code sleep-code
  :trans (behavior ()
    (when (and (-> self level) (tfl-level-has-music? (-> self level)))
      (go tfl-music-player-playing)
      )
    )
  )

(defstate tfl-music-player-playing (tfl-music-player)
  :enter (behavior ()
    (play! self)
    (dotimes (i 10) (suspend))
    )
  :code (behavior ()
    (while *tfl-music-playing?*
      (suspend)
      )
    (go tfl-music-player-fade)
    )
  )

(defstate tfl-music-player-fade (tfl-music-player)
  :code (behavior ()
    (when *tfl-music-playing?*
      (stop! self)
      )
    (dotimes (i 10) (suspend))
    (go tfl-music-player-idle)
    )
  )
